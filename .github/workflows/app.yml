on:
  push:
    paths-ignore:
      - 'README.md'
  workflow_dispatch:
    inputs:
      environmentselector:
        description: 'Environment selector'
        required: false
        default: 'default'
env:
  APP_VERSION: 'v6.1-dev'
  ARD_SOLUTION_ID_TAG: 'app-service-demo'

jobs:
  setup:
    name: Choose Secrets Environment Job
    runs-on: windows-latest
    steps:
      - id: setup
        name: Setup Environment Setp
        run: |
          $envSelector = "${{ github.event.inputs.environmentselector }}"
          Write-Host "Environment Selector: $envSelector Branch ${{ github.ref }}"
          if ($envSelector -eq '' -or $envSelector -eq 'default') {            
            if ('${{ github.ref }}' -eq 'refs/heads/main') { 
              echo "::set-output name=build_env::prod"              
            } else {
              echo "::set-output name=build_env::dev"              
            }
          } else {
            echo "::set-output name=build_env::$envSelector"            
          }
    outputs:
      build_env: ${{ steps.setup.outputs.build_env }}

  cd_deploy:
    name: Deploy Azure Environment
    needs: setup
    environment: ${{ needs.setup.outputs.build_env }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - id: removedevresources
        if: needs.setup.outputs.build_env == 'prod'
        name: Remove Dev Resources
        run: |
          .\Deployment\RemoveDevResources.ps1 -ArdSolutionId ${{ env.ARD_SOLUTION_ID_TAG }}

      - id: resolve-shared-resources
        name: Resolve shared resources
        working-directory: .\deployment
        run: |
          .\ResolveSharedResources.ps1 -BUILD_ENV ${{ needs.setup.outputs.build_env }} -ArdSolutionId ${{ env.ARD_SOLUTION_ID_TAG }}

      - name: Build azure environment and deploy apps
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          deploymentName: 'deploy-${{ needs.setup.outputs.build_env }}-${{ github.run_number }}'
          resourceGroupName: ${{ steps.resolve-shared-resources.outputs.appResourceGroup }}
          template: ./deployment/deploy.bicep
          parameters: >
            keyVaultName=${{ steps.resolve-shared-resources.outputs.keyVaultName }}
            managedIdentityId=${{ steps.resolve-shared-resources.outputs.managedIdentityId }}
            prefix=${{ secrets.PREFIX }}
            appEnvironment=${{ needs.setup.outputs.build_env }}
            sharedResourceGroup=${{ steps.resolve-shared-resources.outputs.sharedResourceGroup }}
            enableAppGateway=${{ steps.resolve-shared-resources.outputs.enableAppGateway }}
            subnetId=${{ steps.resolve-shared-resources.outputs.subnetId }}
            enableFrontdoor=${{ steps.resolve-shared-resources.outputs.enableFrontdoor }}
            enableAPIM=${{ steps.resolve-shared-resources.outputs.enableAPIM }}
            buildAccountName=${{ steps.resolve-shared-resources.outputs.buildAccountName }}
            buildAccountResourceId=${{ steps.resolve-shared-resources.outputs.buildAccountResourceId }}
            appVersion=${{ env.APP_VERSION }}

      - id: resolve-sql-connectionstring
        name: Resolve SQL connection string
        working-directory: .\deployment
        run: |
          .\ResolveSqlConnection.ps1 `
          -APP_VERSION ${{ env.APP_VERSION }} `
          -BUILD_ENV ${{ needs.setup.outputs.build_env }} `
          -ArdSolutionId ${{ env.ARD_SOLUTION_ID_TAG }} `
          -TEMPDIR ${{ github.workspace }}

      - id: deploy_db
        name: Deploy database
        uses: azure/sql-action@v1.2
        with:
          connection-string: ${{ steps.resolve-sql-connectionstring.outputs.sqlConnectionString }}
          dacpac-package: ${{ steps.resolve-sql-connectionstring.outputs.dacpac }}

      - id: add_mock_data
        name: Add mock data in database
        uses: azure/sql-action@v1.2
        with:
          connection-string: ${{ steps.resolve-sql-connectionstring.outputs.sqlConnectionString }}
          sql-file: ${{ steps.resolve-sql-connectionstring.outputs.sqlFile }}
